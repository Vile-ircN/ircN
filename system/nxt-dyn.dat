;---------------------------------------------------------
; NXT dynamic script file
; Do not edit or unload this file (.mrc) while using mIRC!
;
; NXT is based on KTE (Kamek's Theme Engine) by Kamek
;---------------------------------------------------------
alias theme.text {
  if (!$var(%:echo)) { return $false }
  nxt_set std
  if ($isalias(nxt:: $+ $1)) { nxt:: $+ $1 | return $true }
  elseif ($hget(nxt_theme, $1) != $null) {
    var %ln
    set -n %ln $hget(nxt_theme, $1)
    if ($gettok(%ln, 1, 32) == !Script) { set -n %ln $deltok(%ln, 1, 32) }
    else { set -n %ln % $+ :echo $nxt_precompile(%ln) }

    .timernxt_theme 1 0 %ln | .timernxt_theme -e | return $true
  }
  return $false
}
alias nxt_void

alias npre {
  nxt_set std pre
  return %::pre
}
alias hc {
  if (!$window(@nxt_preview-)) return  $+ $base($iifelse($hget(nxt_theme,ircN.HC),0),10,10,2) $+ $1- $+ $iif($1-,)
  var %c = $hget(nxt_theme,ircN.HC)
  if ($gettok($line(@nxt_preview-, $fline(@nxt_preview-,ircN.HC *)), 2-, 32)) %c = $ifmatch
  elseif ($gettok($gettok($line(@nxt_preview-, $fline(@nxt_preview-,Basecolors *)), 2-, 32),3,44)) %c = $ifmatch
  elseif ($gettok($gettok($line(@nxt_preview-, $fline(@nxt_preview-,Basecolors *)), 2-, 32),2,44)) %c = $ifmatch
  elseif ($gettok($gettok($line(@nxt_preview-, $fline(@nxt_preview-,Basecolors *)), 2-, 32),1,44)) %c = $ifmatch
  return  $+ $base($iifelse(%c,0),10,10,2) $+ $1- $+ $iif($1-,) 
}
alias sc {
  if (!$window(@nxt_preview-)) return  $+ $base($iifelse($hget(nxt_theme,ircN.SC),0),10,10,2) $+ $1- $+ $iif($1-,)
  var %c = $hget(nxt_theme,ircN.SC)
  if ($gettok($line(@nxt_preview-, $fline(@nxt_preview-,ircN.SC *)), 2-, 32)) %c = $ifmatch
  elseif ($gettok($gettok($line(@nxt_preview-, $fline(@nxt_preview-,Basecolors *)), 2-, 32),4,44)) %c = $ifmatch
  elseif ($gettok($gettok($line(@nxt_preview-, $fline(@nxt_preview-,Basecolors *)), 2-, 32),3,44)) %c = $ifmatch
  elseif ($gettok($gettok($line(@nxt_preview-, $fline(@nxt_preview-,Basecolors *)), 2-, 32),2,44)) %c = $ifmatch
  elseif ($gettok($gettok($line(@nxt_preview-, $fline(@nxt_preview-,Basecolors *)), 2-, 32),1,44)) %c = $ifmatch
  return  $+ $base($iifelse(%c,0),10,10,2) $+ $1- $+ $iif($1-,) 
}
alias ac {
  if (!$window(@nxt_preview-)) return  $+ $base($iifelse($hget(nxt_theme,ircN.AC),0),10,10,2) $+ $1- $+ $iif($1-,)
  var %c = $hget(nxt_theme,ircN.AC)
  if ($gettok($line(@nxt_preview-, $fline(@nxt_preview-,ircN.AC *)), 2-, 32)) %c = $ifmatch
  elseif ($gettok($gettok($line(@nxt_preview-, $fline(@nxt_preview-,Basecolors *)), 2-, 32),2,44)) %c = $ifmatch
  elseif ($gettok($gettok($line(@nxt_preview-, $fline(@nxt_preview-,Basecolors *)), 2-, 32),1,44)) %c = $ifmatch
  return  $+ $base($iifelse(%c,0),10,10,2) $+ $1- $+ $iif($1-,)
}

alias ihelp {
  nxt_set std
  set -u1 %:echo echo $color(normal) -ai2
  if (!$1) {
    var %a, %y = 1
    var %x = $findfile($hd(iHelp\),*.ini,0,set %a $addtok(%a,$remove($nopath($1-),.ini),32) )

    nxt::iHelp.main.top
    ;iecho %a
    while (%y <= %x) {
      set -u1 %::ihelpline $gettok(%a,%y - $+ $calc(%y + $hget(nxt_theme,iHelp.lc) - 1),32)
      nxt::iHelp.line 
      inc %y $hget(nxt_theme,iHelp.lc)
    }
    nxt::iHelp.main.bottom
  }
  elseif ($2) {
    if ($isfile($hd(iHelp\ $+ $1 $+ .ini ))) {
      var %a = 0, %b = $ini($hd(iHelp\ $+ $1 $+ .ini ),$2,0)
      if (%b == 0) goto nohelp
      iecho HELP: $upper($1-2)
      while (%a < %b) {
        iecho $readini($hd(iHelp\ $+ $1 $+ .ini ),n,$2,n $+ %a)
        inc %a
      }
      nxt::iHelp.cmd.bottom
    }
    else goto nohelp
  }
  else {
    if ($isfile($hd(iHelp\ $+ $1 $+ .ini ))) {
      var %a = 0, %b = $ini($hd(iHelp\ $+ $1 $+ .ini ),main1,0)
      if (%b == 0) goto nohelp
      iecho HELP: $upper($1)
      while (%a < %b) {
        iecho $readini($hd(iHelp\ $+ $1 $+ .ini ),n,main1,n $+ %a)
        inc %a
      }
      nxt::iHelp.cmd.bottom

    }
    else goto nohelp
  }
  goto end
  :nohelp
  iecho No help for $upper($1-)
  :end
}

alias iscript {
  nxt_set std
  set -u1 %:echo echo $color(normal) -ai2
  if (!$1) {

    nxt::iScript.main.top

var %q = 1, %r, %r2
while ($finddir($hd(iScript),*,%q) != $null) { 

set %r $ifmatch

if (!$findfile($qt(%r),*.ini,0)) { inc %q | continue }

set %r2 $gettok($rq(%r),-1,92)
echo -sg $b($upper(%r2)) $+ :



    var %a, %y = 1
    var %x = $findfile($qt(%r),*.ini,0,set %a $addtok(%a, $iif(%r2 == identifiers,$chr(36),$iif(%r2 == event,on-)) $+ $remove($nopath($1-),.ini) , 32) )

    ;iecho %a
    while (%y <= %x) {
      set -u1 %::iscriptline $gettok(%a,%y - $+ $calc(%y + $hget(nxt_theme,iScript.lc) - 1),32)
      nxt::iScript.line 
      inc %y $hget(nxt_theme,iScript.lc)
    }

inc %q
}

    nxt::iScript.main.bottom
  }
  elseif ($2) {
    if ($isfile($hd(iScript\ $+ $1 $+ .ini ))) {
      var %a = 0, %b = $ini($hd(iScript\ $+ $1 $+ .ini ),$2,0)
      if (%b == 0) goto nohelp
      iecho HELP: $upper($1-2)
      while (%a < %b) {
        iecho $readini($hd(iScript\ $+ $1 $+ .ini ),n,$2,n $+ %a)
        inc %a
      }
      nxt::iScript.cmd.bottom
    }
    else goto nohelp
  }
  else {
    if ($isfile($hd(iScript\ $+ $1 $+ .ini ))) {
      var %a = 0, %b = $ini($hd(iScript\ $+ $1 $+ .ini ),main1,0)
      if (%b == 0) goto nohelp
      iecho HELP: $upper($1)
      while (%a < %b) {
        iecho $readini($hd(iScript\ $+ $1 $+ .ini ),n,main1,n $+ %a)
        inc %a
      }
      nxt::iScript.cmd.bottom

    }
    else goto nohelp
  }
  goto end
  :nohelp
  iecho No help for $upper($1-)
  :end
}
alias -l _entered {
  var %def = $readini($mircini, events, default), %set
  if (!%def) { %def = 0,0,0,0,0,0,0,0 }
  %set = $readini($mircini, events, $1)
  if (!%set) { %set = 0,0,0,0,0,0,0,0 }
  while ($findtok(%set, 0, 1, 44)) { %set = $puttok(%set, $calc($gettok(%def, $ifmatch, 44) + 1), $ifmatch, 44) }
  hadd nxt_events $1 %set
}
alias -l _left {
  set -u0 %nxt_chan $1
  var %i = $scon(0)
  while (%i) { if ($scon(%i) != $cid) && ($scon(%i).nxt_haschan) { return } | dec %i }
  hdel nxt_events $1
}
alias -l nxt_haschan return $chan(%nxt_chan)

alias -l _isactive if ($cid == $activecid) { return 1 } | return 0
alias -l _active if ($cid == $activecid) { return a } | return s
alias -l _ischat {
  var %n = $mid($1, 2)
  if (=* !iswm $1) { return 1 }
  if (=* iswm $1) && (($chat(%n)) || ($fserv(%n))) { return 1 }
  return 0
}

; events
on ^&*:JOIN:#:{
  if ($chan !ischan) { return }
  if ($nick == $me) { _entered $chan }
  if ($chan.ishideevent(join,$chan)) { haltdef | return }
  var %tgt = $chan.eventtarget(join,$chan)) 
  if (!%tgt) var %tgt = $gettok($hget(nxt_events, $chan), 1, 44)
  if (%tgt = 3) && ($nick != $me) { haltdef | return }
  nxt_set std nick address target chanstd
  if (%tgt = 2) { set -u1 %:echo echo $color(join) -sti2 $+ $iif($nvar(logging.stripjoin),g) }
  else { set -u1 %:echo echo $color(join) -ti2 $+ $iif($nvar(logging.stripjoin),g) $+ $iif($ischanset(nohighlightmessage,$chan),n) $chan }
  if ($nick == $me) { nxt::JoinSelf }
  else { nxt::Join }
  nxt_unset
}
on ^&*:PART:#:{
  if ($chan !ischan) { return }
  if ($chan.ishideevent(part,$chan)) { goto skip }
  var %tgt = $chan.eventtarget(part,$chan)) 
  if (!%tgt) var %tgt = $gettok($hget(nxt_events, $chan), 2, 44)
  if ($nick != $me) || (%tgt = 2) {
    if (%tgt = 3) { goto skip }
    if (%tgt = 2) { set -u1 %:echo echo $color(part) -sti2 $+ $iif($nvar(logging.strippart),g) }
    else { set -u1 %:echo echo $color(part) -ti2 $+ $iif($nvar(logging.strippart),g) $+ $iif($ischanset(nohighlightmessage,$chan),n) $chan }
    set -nu1 %::text $strip($1-, o)
    nxt_set std nick address target chanstd parentext
    nxt::Part
    nxt_unset
    goto end
  }
  :skip
  if ($nick == $me) { _left $chan }
  else {
   if (($ialget($nick,nickcol)) && ($chancid($chan,$tab(nickcol,availpool)))) chancid $chan $tab(nickcol,availpool) $addtok($chancid($chan,$tab(nickcol,availpool)),$ialget($nick,nickcol),32)
  }
  haltdef
  :end
}

on ^&*:QUIT:{
  if ($ns.issplit($nick)) { haltdef | return }
  var %i = $comchan($nick, 0), %tgt, %st = 0
  set -nu1 %::text $strip($1-, o)
  nxt_set std nick address parentext
  while (%i) {
    %::chan = $comchan($nick, %i)
    if ($ischanset(autocycle,%::chan)) $+(.timer,$cid,.quitcheck.,%::chan) 1 1 doquitcheck.chan %::chan
    if (($ialget($nick,nickcol)) && ($chancid(%::chan,$tab(nickcol,availpool))))   chancid %::chan $tab(nickcol,availpool) $addtok($chancid(%::chan,$tab(nickcol,availpool)),$ialget($nick,nickcol),32)
    if ($chan.ishideevent(quit,%::chan)) { dec %i | continue }
 
    var %tgt = $chan.eventtarget(quit,%::chan)) 
    if (!%tgt) %tgt = $gettok($hget(nxt_events, %::chan), 3, 44)
    if (%tgt = 4) { dec %i | continue }
    if (%tgt = 3) || (%tgt = 2) { %st = 1 }
    if (!%tgt) || (%tgt = 3) || (%tgt = 1) { %:echo = echo $color(quit) -ti2 $+ $iif($nvar(logging.stripquit),g) $+ $iif($ischanset(nohighlightmessage,%::chan),n) %::chan | nxt::Quit ! }

    dec %i
  }
  unset %::chan
  if ($query($nick)) { %:echo = echo $color(quit) -ti2 $+ $iif($nvar(logging.stripquit),g) $nick | nxt::Quit ! }
  if (%st) { %:echo = echo $color(quit) -sti2 $+ $iif($nvar(logging.stripquit),g) | nxt::Quit ! }
  haltdef
  nxt_unset
}

on ^&*:NICK:{
  var %i = $comchan($newnick, 0), %tgt
  nxt_set std nick address
  set -u1 %::newnick $newnick
  if ($nick == $me) { %:echo = echo $color(nick) -sti2 $+ $iif($nvar(logging.stripnick),g) | nxt::NickSelf ! }
  while (%i) {
    set -u1 %::chan $comchan($newnick, %i)
    if ($chan.ishideevent(nick,%::chan)) { dec %i | continue }
    var %tgt = $chan.eventtarget(nick,%::chan)) 
    if (!%tgt)  %tgt = $gettok($hget(nxt_events, %::chan), 7, 44)
    if (%tgt != 2) || ($nick == $me) { %:echo = echo $color(nick) -ti2 $+ $iif($nvar(logging.stripnick),g) $+ $iif($ischanset(nohighlightmessage,%::chan),n) %::chan | nxt::Nick ! }
    dec %i
  }
  if ($query($newnick)) { unset %::chan | %:echo = echo $color(nick) -ti2 $+ $iif($nvar(logging.stripnick),g) $newnick | nxt::Nick ! }
  haltdef
  nxt_unset + chan newnick
}

on ^&*:USERMODE:{
  nxt_set std nick address
  set -nu1 %::modes $1-
  set -u1 %:echo echo $color(mode) -sti2
  nxt::ModeUser
  unset %::modes
  nxt_unset
}
on ^&*:RAWMODE:#:{
  if ($chan !ischan) { return }
  if ($chan.ishideevent(mode,$chan)) { haltdef | return }
  var %tgt = $chan.eventtarget(mode, $chan)) 
  if (!%tgt)  var %tgt = $gettok($hget(nxt_events, $chan), 4, 44)
  if (%tgt = 3) { haltdef | return }
  nxt_set std nick address target chanstd
  if (%tgt = 2) { set -u1 %:echo echo $color(mode) -sti2 $+ $iif($nvar(logging.stripmode),g)  }
  else { set -u1 %:echo echo $color(mode) -ti2 $+ $iif($nvar(logging.stripmode),g) $+ $iif($ischanset(nohighlightmessage,$chan),n) $chan }
  set -nu1 %::modes $1-
  nxt::Mode
  unset %::modes
  nxt_unset
}

on ^&*:TOPIC:#:{
  if ($chan !ischan) { return }
  if ($chan.ishideevent(topic,$chan)) { haltdef | return }
  var %tgt = $chan.eventtarget(topic, $chan)) 
  if (!%tgt)  var %tgt = $gettok($hget(nxt_events, $chan), 5, 44)
  if (%tgt = 3) { haltdef | return }
  if (%tgt = 2) { set -u1 %:echo echo $color(topic) -sti2 $+ $iif($nvar(logging.striptopic),g)  }
  else { set -u1 %:echo echo $color(topic) -ti2 $+ $iif($nvar(logging.striptopic),g) $+ $iif($ischanset(nohighlightmessage,$chan),n) $chan }
  set -nu1 %::text $1-
  nxt_set std nick address target chanstd parentext
  nxt::Topic
  nxt_unset
}
on ^&*:KICK:#:{
  if ($chan !ischan) { return }
  if (($ialget($knick,nickcol)) && ($chancid($chan,$tab(nickcol,availpool))))   chancid $chan $tab(nickcol,availpool) $addtok($chancid($chan,$tab(nickcol,availpool)),$ialget($knick,nickcol),32)
  if ($chan.ishideevent(kick,$chan)) { haltdef | return }
  var %tgt = $chan.eventtarget(kick, $chan)) 
  if (!%tgt) var %tgt = $gettok($hget(nxt_events, $chan), 8, 44)
  if (%tgt = 3) && ($knick != $me) { haltdef | return }
  if (%tgt = 2) { set -u1 %:echo echo $color(kick) -sti2 $+ $iif($nvar(logging.stripkick),g)  }
  else { set -u1 %:echo echo $color(kick) -ti2 $+ $iif($nvar(logging.stripkick),g) $+ $iif($ischanset(nohighlightmessage,$chan),n) $chan }
  set -u1 %::knick $knick
  set -u1 %::kaddress $gettok($address($knick, 5), 2, 33)
  set -nu1 %::text $strip($1-, o)
  nxt_set std nick address target chanstd parentext
  if ($knick == $me) {
    nxt::KickSelf !
    if (%tgt == 2) { set -u1 %:echo echo $color(kick) -ti2 $+ $iif($nvar(logging.stripkick),g) $+ $iif($ischanset(nohighlightmessage,$chan),n) $chan }
    else { set -u1 %:echo echo $color(kick) -seti2 $+ $iif($nvar(logging.stripkick),g)  }
    nxt::KickSelf !
    _left $chan
  }
  else { nxt::Kick ! }
  haltdef
  nxt_unset + knick kaddress
}

on ^&*:INVITE:#:{
  var %e = echo $color(invite) -ti2
  nxt_set std nick address chan target
  if ($_isactive) && (@* !iswm $active) && ($hget(nxt_events, Active.Invites)) { set -u1 %:echo %e $+ a }
  else { set -u1 %:echo %e $+ s }
  nxt::Invite
  nxt_unset
}

on ^&*:ERROR:*:{
  set -u1 %:echo echo $color(other) -sti2 | set -nu1 %::text $2-
  nxt_set std nick parentext
  nxt::ServerError
  nxt_unset
}

on ^&*:NOTIFY:{
  set -u1 %:echo echo $color(notify) -ti2 $+ $iif(($_isactive) && (@* !iswm $active), a, s)
  set -nu1 %::text $notify($nick).note
  nxt_set std nick address parentext
  nxt::Notify
  nxt_unset
}
on ^&*:UNOTIFY:{
  set -u1 %:echo echo $color(notify) -ti2 $+ $iif(($_isactive) && (@* !iswm $active), a, s)
  set -nu1 %::text $notify($nick).note
  nxt_set std nick address parentext
  nxt::UNotify
  nxt_unset
}

on ^&*:WALLOPS:*:{
  if ($halted) return
  set -u1 %:echo echo $color(wallops) -ti2 $+ $iif(($_isactive) && (@* !iswm $active), a, s)
  if ($nvar(show.wallop) == window) {
    var %w = @Operwall. $+ $curnet $+ . $+ $cid
    if (!$window(%w)) window -ekvmnR %w
    set -u1 %:echo echo $color(wallops) -mgti2 %w
  }
  set -nu1 %::text $strip($1-, o)
  nxt_set std nick address target parentext
  nxt::Wallop
  nxt_unset
}

on &*:DNS:{
  set -u1 %:echo echo $color(info) -ti2 $+ $iif(($_isactive) && (@* !iswm $active), a, s)
  nxt_set std
  if ($dns(0)) {
    var %i = 1, %t = $dns(0)
    while (%i <= %t) {
      set -nu1 %::nick $dns(%i).nick
      set -nu1 %::address $dns(%i)
      set -nu1 %::iaddress $dns(%i).ip
      set -nu1 %::naddress $dns(%i).addr
      set -nu1 %::raddress $remtok($dns(%i).ip $dns(%i).addr, $dns(%i), 1, 32)
      if (!%::raddress) goto unabletoresolv
      if (!%::nick) set -nu1 %::nick $ial(*!*@ $+ %::naddress).nick
      nxt::DNSResolve
      inc %i
    }
  }
  else {
   :unabletoresolv
    set -nu1 %::nick $iifelse($nick,$ial(*!*@ $+ $naddress).nick)
    set -nu1 %::address $address
    nxt::DNSError
  }
  nxt_unset + nick address iaddress raddress naddress
}
raw 340:*:{
    var %n = $gettok($2,1,61)
    if ($istok($ncid(unreal_useripdns),%n,44)) {
    set -u1 %:echo echo $color(info) -ti2 $+ $iif(($_isactive) && (@* !iswm $active), a, s)
    nxt_set std

    set -nu1 %::nick %n
    set -nu1 %::address $gettok($address(%n,0),2-,64)
    set -nu1 %::iaddress $_gettok($2,2-,61,2,64)
    set -nu1 %::naddress $gettok($address(%n,0),2-,64)
    set -nu1 %::raddress $_gettok($2,2-,61,2,64)
    nxt::DNSResolve

    if ($ial(%n)) ialset %n cdns %::iaddress
    ncid unreal_useripdns $remtok($ncid(unreal_useripdns),%n,1,44)

    nxt_unset + nick address iaddress raddress naddress 
    halt
  }
  else iecho -t $2-
}


on ^&*:SNOTICE:*:{
  if ($halted) return

  if ($istok(connecting loggingon,$status,32)) set -u1 %:echo echo $color(notice) -sti2
  else {
  if ($nvar(show.snotice) == window) {
    if (!$window(@sNotice. $+ $curnet $+ . $+ $cid)) window -nRvkm @sNotice. $+ $curnet $+ . $+ $cid
     set -u1 %:echo echo $color(notice) -mti2 @sNotice. $+ $curnet $+ . $+ $cid
  }
  elseif ($nvar(show.snotice) == active) set -u1 %:echo echo $color(notice) -ti2 $+ $iif(($_isactive) && (@* !iswm $active), a, s)
  else  set -u1 %:echo echo $color(notice) -sti2
  }
  set -nu1 %::network $curnet(noserver)
  set -nu1 %::text $strip($1-, o)
  nxt_set std nick target parentext
  nxt::NoticeServer
  nxt_unset
}
on &*:INPUT:*:{

   if ($inpaste) {
    if ($isalias(_pasteprot)) {
      if (%:pasteprot == 2) halt
      if (%:pasteprot != 1) {
        if ($_pasteprot == $false) { set -u3 %:pasteprot 2 | halt }
        else { set -u3 %:pasteprot 1 }
      }
    }
  }


  if ($0) && ((/* !iswm $1) || ($ctrlenter)) && (($active ischan) || ($inpaste) || ($query($active)) || (=* iswm $active)) && ($window($active, 0) = 1) {


    if (($active ischan) && ($hget(nxt_theme,TextChanSelf))) {
      if (($nvar(nickcomp) == on) && ($right($1,1) == $nvar(nickcomp.nch)) && ($1 != $nvar(nickcomp.nch)) && ($inpaste != $true) && ($ctrlenter != $true)) {
       if ($remove($nc($1,$chan),$nvar(nickcomp.nch)) ison $chan) { 
          set -nu0 %::parse.input $2-
          .signal -n parse_textinput 
          say $ncomp($nc($1,$chan)) %::parse.input
          unset %::parse.input
        } 
        else { 
          set -nu0 %::parse.input $1-
          .signal -n parse_textinput 
          say %::parse.input
          unset %::parse.input
        }
        halt
      }
      else {      
         set -nu0 %::parse.input $1-
        .signal -n parse_textinput     
        say %::parse.input
        unset %::parse.input
        halt
      }
    }

    elseif (($active !ischan) && ($hget(nxt_theme,TextQuerySelf))) {
      set -nu0 %::parse.input $1-
      .signal -n parse_textinput 
      say %::parse.input
      unset %::parse.input
      halt
    }


  }
}


alias say {
  if ($isid) { return }
  if ($1- == !HALT!) return
  if ($status == disconnected) || (!$0) || (($active !ischan) && (!$query($active))) && (=* !iswm $active) {
    .timer.nxt 1 0 !say $1- | .timer.nxt -e | halt
  }
  .!msg $active $1-
  ncid lastspoke $ctime
  set -u1 %:echo echo $color(own) -ati2
  set -nu1 %::text $1- | set -u1 %::target $active | set -u1 %::nick $me
  nxt_set std parentext
  var %nickcol = $_nickcol($me)

  if ($active ischan) {
    set -u1 %::chan $active
    if ($nick($active, $me).pnick != $me) { set -u1 %::cmode $left($ifmatch, 1) }
    set -u1 %::cnick $nick($active, $me).color
    if ($show) {
      nxt::TextChanSelf !
    }
  }
  else {
    set -u1 %::cnick $cnick($me).color
    if ($show) {
      nxt::TextQuerySelf !
    }
  }
  nxt_unset + target nick address chan cnick cmode
}
alias query {
  if ($isid) { return }
  if (!$0) { .timer.nxt 1 0 !query | .timer.nxt -e | halt }
  !query $1
  if ($0 > 1) {
    if (!$server) { .timer.nxt 1 0 !query $1- | .timer.nxt -e | halt }
    msg $1-
  }
}

alias msg {
  if ($isid) { return }
  if ($0 < 2) || ((=* !iswm $1) && ($status == disconnected)) || (!$_ischat($1)) {
    .timer.nxt 1 0 !msg $1- | .timer.nxt -e | halt
  }
  if ($1 ischan) chancid $1 lastactive $ctime 
  .!msg $1-
  ncid lastspoke $ctime
  if (!$show) { return }
  set -nu1 %::text $2- | set -u1 %::target $1 | set -u1 %::nick $me
  nxt_set std parentext
  ; %::nick = $me. This is a matter of logic.
  ; Use <target> in your script, not <nick>, to refer to the recipient of the message.
  if ($1 ischan) || ($query($1)) || (=* iswm $1) {
    set -u1 %:echo echo $color(own) -ti2 $1
    if ($1 ischan) {

      if ($ischanset(linesep.samenick,$1)) {
        if ($me != $chancid($1,lsnick)) echo -g $1 
      }     

      if ($nick($1, $me).pnick != $me) { set -u1 %::cmode $left($ifmatch, 1) }
      set -u1 %::cnick $nick($1, $me).color
      nxt::TextChanSelf !
    }
    else { nxt::TextQuerySelf ! }
  }
  else {
    set -u1 %:echo echo $color(own) -ti2 $+ $_active
    nxt::TextMsgSelf
  }
  nxt_unset + target nick chanstd
}
alias amsg {
  if ($isid) { return }
  if ($status == disconnected) || (!$0) || (!$chan(0)) { .timer.nxt 1 0 !amsg $1- | .timer.nxt -e | halt }
  !.amsg $1-
  ncid lastspoke $ctime
  if (!$show) { return }
  set -nu1 %::text $1- | set -u1 %::nick $me
  nxt_set std parentext
  var %i = $chan(0)
  while (%i) {
    set -u1 %::chan $chan(%i)
    set -u1 %::target %::chan
    set -u1 %:echo echo $color(own) -ti2 %::chan
    if ($nick($chan(%i), $me).pnick != $me) { set -u1 %::cmode $left($ifmatch, 1) }
    set -u1 %::cnick $nick(%::chan, $me).color
    nxt::TextChanSelf !
    dec %i
  }
  nxt_unset + nick cnick cmode chan target
}


alias me {
  if ($isid) { return }
  if (!$server) || (!$0) || (($active !ischan) && (!$query($active))) && (=* !iswm $active) {
    .timer.nxt 1 0 !me $1- | .timer.nxt -e | halt
  }
  .!describe $active $1-
  ncid lastspoke $ctime
  if (!$show) { return }
  set -u1 %:echo echo $color(action) -ati2
  set -nu1 %::text $1- | set -u1 %::target $active | set -u1 %::nick $me
  nxt_set std parentext
  if ($active ischan) {
    set -u1 %::chan $active
    if ($nick($active, $me).pnick != $me) { set -u1 %::cmode $left($ifmatch, 1) }
    set -u1 %::cnick $nick($active, $me).color
  }
  nxt::ActionChanSelf !
  nxt_unset + target nick chan cnick cmode
}
alias action {
  if ($isid) { return }
  if (!$server) || (!$0) || (($active !ischan) && (!$query($active))) && (=* !iswm $active) {
    .timer.nxt 1 0 !action $1- | .timer.nxt -e | halt
  }
  me $1-
}
alias describe {
  if ($isid) { return }
  if (!$server) || ($0 < 2) || (!$_ischat($1)) {
    .timer.nxt 1 0 !describe $1- | .timer.nxt -e | halt
  }
  .!describe $1-
  ncid lastspoke $ctime
  if (!$show) { return }
  set -nu1 %::text $2- | set -u1 %::target $1 | set -u1 %::nick $1
  nxt_set std parentext
  if ($1 ischan) || ($query($1)) || (=* iswm $1) {
    set -u1 %:echo echo $color(action) -ti2 $1
    if ($1 ischan) {
      set -u1 %::chan $1
      if ($nick($1, $me).pnick != $me) { set -u1 %::cmode $left($ifmatch, 1) }
      set -u1 %::cnick $nick($1, $me).color
      nxt::ActionChanSelf !
    }
    else { nxt::ActionQuerySelf ! }
  }
  else { set -u1 %:echo echo $color(action) -ti2 $+ $_active | nxt::ActionMsgSelf ! }
  nxt_unset + target chan cmode cnick nick
}
alias ame {
  if ($isid) { return }
  if (!$server) || (!$0) || (!$chan(0)) { .timer.nxt 1 0 !ame $1- | .timer.nxt -e | halt }
  !.ame $1-
  ncid lastspoke $ctime
  if (!$show) { return }
  set -nu1 %::text $1- | set -u1 %::nick $me
  nxt_set std parentext
  var %i = $chan(0)
  while (%i) {
    set -u1 %::chan $chan(%i)
    set -u1 %::target %::chan
    set -u1 %:echo echo $color(action) -ti2 %::chan
    if ($nick(%::chan, $me).pnick != $me) { set -u1 %::cmode $left($ifmatch, 1) }
    set -u1 %::cnick $nick(%::chan, $me).color
    nxt::ActionChanSelf !
    dec %i
  }
  nxt_unset + target chan cnick cmode nick
}

alias notice {
  if ($isid) { return }
  if (!$server) || ($0 < 2) { .timer.nxt 1 0 !notice $1- | .timer.nxt -e | halt }
  .!notice $1-
  ncid lastspoke $ctime
  if (!$show) { return }
  set -nu1 %::text $2- | set -u1 %::target $1 | set -u1 %::nick $1
  nxt_set std parentext
  set -u1 %:echo echo $color(notice) -ti2 $+ $_active
  if ($1 ischan) { set -u1 %::chan $1 | nxt::NoticeSelfChan ! }
  else { nxt::NoticeSelf ! }
  nxt_unset + target nick chan
}
on *:SIGNAL:highlight:{
  set -nu1 %::text $6-
  set -nu1 %::highltype $1 | set -nu1 %::nick $2 | set -nu1 %::chan $3 | set -nu1 %::network $scid($4).network | set -nu1 %::server $scid($4).server | set -nu1 %::hword $5 | set -nu1 %::hcolor $highlight($5).color
  scid $activecid
  
  
 if ($nvar(highlightwin) == on) {
  var %w
    
   if ($nvar(highlightwin.global) == on) {
      var %ghwin = $true
      set %w @Highlight
      window -kinR %w
    }
    else {
      scid $4
      set %w @Highlight. $+ %::network $+ . $+ $4
      window -knR %w
    }

      set -u1 %:echo echo %::hcolor -mti2 %w

      if (%ghwin) {
      if ($ntmp(highlight.daychange) != $asctime(ddmmyyyy)) echo -ti2 %w ---- $asctime(ddd $+ $chr(44) mmm dd) ----
      ntmp highlight.daychange $asctime(ddmmyyyy)
      if ($hget(nxt_theme,HighlightWinglobal)) {
            nxt::HighlightWinglobal
      }
      }
      else {
      if ($hget(nxt_theme,HighlightWin)) {
      if ($ntmp(highlight.daychange) != $asctime(ddmmyyyy)) echo -ti2 %w ---- $asctime(ddd $+ $chr(44) mmm dd) ----
      ntmp highlight.daychange $asctime(ddmmyyyy)
            nxt::HighlightWin
      }
      scid -r
    }
  }
  elseif ($1 == nonactive) {
    set -u1 %:echo echo $color(normal) -ambgfti2

    if ($hget(nxt_theme,HighlightActive)) {
      nxt::HighlightActive
    }
  }
  scid -r
  unset %::hword %::chan %::nick %::highltype %::hcolor %::text %::network %::server
}
alias bgfix.regex {
  var %a = $regex(bgfix,$1-, /(\d{1,2})/g)
  var %b, %x = 1
  while (%x <= %a) {
    if ($base($regml(bgfix,%x),10,10,2) == $base($colour(background),10,10,2)) return $true
    inc %x
  }
  set %a $regex(bgfix,$1-,/(\d{1,2}\x2C\d{1,2})/g)
  set %x 1
  while (%x <= %a) {
    set %b $regml(bgfix,%x)
    if ($base($gettok(%b,1,44),10,10,2) == $base($$gettok(%b,2,44),10,10,2)) return $true
    inc %x
  }
}
on &^*:TEXT:*:#:{
  if ($halted) return
  if ($chan !ischan) { return }

  if (!$ialget($nick,nickcol)) { 
    ialset $nick nickcol $_nickcol.randcolor($chan) 
    ;only save this if they have 'expire color times' on, otherwise it's just wasting their memory storing something we wont need to use for anything else
    ialset $nick nickcol_t $ctime
  }
  if ($ischanset(linesep.samenick,$chan)) {
    if ($nick != $chancid($chan,lsnick)) echo -g $chan 
  }
  chancid $chan lsnick $nick
  set -nu %::hword $hlightt($strip($1-))
  if ((%::hword) && ($nvar(highlight.blockannoy) == on)) {
    if ((%::hword == $me) || (%::hword == $trimnonalphanum($me))) {
      if ($hlightt.floodannoy($chan, $strip($1-)) >= 80) {
        var %highlightannoy = 1
        unset %::hword
      }
    }
  }

  set -u1 %:echo echo $color(normal) - $+ $iif($ischanset(nohighlightmessage,$chan),n,m) $+ $iif(!%highlightannoy,l) $+ bfti2 $chan
  set -nu1 %::text $strip($1-, o)
  nxt_set std nick address chanstd target parentext

  if ((%::hword) && (($hget(nxt_theme,HighlightWin)) || ($hget(nxt_theme,HighlightActive)))) {
    if ($chan != $active) .signal highlight nonactive $nick $chan $cid %::hword $strip($1-)
    else .signal highlight active $nick $chan $cid %::hword $strip($1-)
  }

  if ($istok($nget(ignorechans),$chan,44)) { haltdef | return }
  if ($hget(nxt_events,$+(show.text.,$chan)) == 4) { haltdef | return }
  if ($chan.ishideevent(text,$chan)) { haltdef | return }

  if ($chan.ignoretextmatch($chan,$strip($1-))) { haltdef | return }
  if ($ischanset(stripcodes,$chan)) set %::text $strip(%::text)
  
   if ($nvar(bgfix) == on) {
    if ($bgfix.regex(%::text)) { set -u1 %::text $replace(%::text, $+ $base($color(background),10,10,2), $+ $base($color(normal),10,10,2)) }
  }
  var %nickcol = $_nickcol($nick)

  if ((%::hword) && ($hget(nxt_theme,HighlightChan))) {
    nxt::HighlightChan
  }
  else {
  if ($chan.isencrypt(incoming,#)) {
   nxt::TextChanEncrypted
  }
     
    nxt::TextChan
  }
  nxt_unset
}
on &^*:ACTION:*:#:{
  if ($halted) return
  if ($istok($nget(ignorechans),$chan,44)) { haltdef | return }
  if ($chan.ishideevent(action,$chan)) { haltdef | return }
  if ($hget(nxt_events,$+(show.actions.,$chan)) == 4) { haltdef | return }
  
  if ($chan !ischan) { return }
  set -u1 %:echo echo $color(action) - $+ $iif($ischanset(nohighlightmessage,$chan),n,m) $+ lbfti2 $chan
  set -nu1 %::text $strip($1-, o)

  if ($ischanset(stripcodes,$chan)) set %::text $strip(%::text)
  else {
  if ($nvar(bgfix) == on) {
    if ($bgfix.regex(%::text)) { set -u1 %::text $replace(%::text, $+ $base($color(background),10,10,2), $+ $base($color(normal),10,10,2)) }
  }
  }
  if ($ischanset(linesep.samenick,$chan)) {
    if ($nick != $chancid($chan,lsnick)) echo -g $chan 
  }
  chancid $chan lsnick $nick
  nxt_set std nick address chanstd target parentext
  nxt::ActionChan
  nxt_unset

}
on &^*:NOTICE:*:#:{
  if ($halted) return
  if ($chan !ischan) { return }
  set -u1 %:echo echo $color(notice) - $+ $iif($ischanset(nohighlightmessage,$chan),n,m) $+ ti2 $chan
  set -nu1 %::text $strip($1-, o)
  nxt_set std nick address chanstd target parentext
  nxt::NoticeChan
  nxt_unset
}

on &^*:CHAT:*:{
  if ($isbit($hget(nxt_data, NoTheme),1)) return
  if ($window(=$nick, 0) > 1) { return }
  nxt_set std nick address target
  if (ACTION * iswm $1-) {
    set -u1 %:echo echo $color(action) -mti2lbf =$nick
    set -nu1 %::text $strip($mid($1-, 8, -1), o)
    nxt_set parentext
    nxt::ActionQuery
  }
  else {
    set -u1 %:echo echo $color(normal) -mti2lbf =$nick
    set -nu1 %::text $strip($1-, o)
    nxt_set parentext
    nxt::TextQuery
  }
  nxt_unset std nick address target parentext
}
on *:OPEN:?:{
  if ($nick == $me) return
  set -u1 %:echo echo $color(normal) -mti2lbf $nick
  set -u1 %::nick $nick
  set -u1 %::address $address
  set -u1 %::comchans $com.channels($nick)
  nxt::QueryOpen
  if (($nvar(commonquery) == on) && ($comchan($nick,0))) {
    nxt::QueryComChans
  }
  if ($nvar(showloginquery)) {
    var %f = $qt($mklogfn($nick))
    if (($isfile(%f)) && ($lines(%f) > 4)) {
      echo -gi2 $nick ------------------------ old log ------------------------
      loadbuf 50 -pi $nick %f
      echo -gi2 $nick ---------------------------------------------------------
    }
  }
  if (!$istok(-psybnc *status *admin,$nick,32)) {
   if ($mopt(1,19) == 1) whois $nick
   _recentquery $nick
   }

  unset %:echo %::nick %::address %::comchans
}
on &^*:TEXT:*:?:{
  if ($isbit($hget(nxt_data, NoTheme),2)) return
  var %e = echo $color(normal) $+(-mti2,$iif($hlightt($strip($1-)),l))
  if ($isqueryset(stripcodes,$nick))  set -nu1 %::text $strip($1-)
  else set -nu1 %::text $strip($1-, o)
  nxt_set std nick address target parentext
  var %nickcol = $_nickcol($nick)

  if ($query($nick)) {
    set -u1 %:echo %e $nick
    nxt::TextQuery
  }
  else {
    if ($window(Message Window)) { set -u1 %:echo %e $+ d }
    elseif ($_isactive) && (@* !iswm $active) && ($hget(nxt_events, Active.Queries)) { set -u1 %:echo %e $+ a }
    else { set -u1 %:echo %e $+ s }
    nxt::TextMsg
  }
  nxt_unset
}
on &^*:ACTION:*:?:{
  var %e = echo $color(action) -mti2
  set -nu1 %::text $strip($1-, o)
  nxt_set std nick address target parentext
  if ($query($nick)) { set -u1 %:echo %e $nick | nxt::ActionQuery }
  else {
    if ($window(Message Window)) { set -u1 %:echo %e $+ d }
    elseif ($_isactive) && (@* !iswm $active) && ($hget(nxt_events, Active.Queries)) { set -u1 %:echo %e $+ a }
    else { set -u1 %:echo %e $+ s }
    nxt::ActionMsg
  }
  nxt_unset
}
on &^*:NOTICE:*:?:{
  var %e = echo $color(notice) -mti2
  if ($_isactive) && (@* !iswm $active) && ($hget(nxt_events, Active.Notices)) { set -u1 %:echo %e $+ a }
  else { set -u1 %:echo %e $+ s }
  set -nu1 %::text $strip($1-, o)
  nxt_set std nick address target parentext
  nxt::Notice

  if ($online > 30) _recentnotice $nick

  nxt_unset
}
on *:SIGNAL:ircn_hook_event_encryptedquery:{
  var %:echo = echo $color(normal) -mti2 %::target

  nxt::TextQueryEncrypted

}
on *:SIGNAL:ircn_hook_event_encryptedqueryself:{
  var %:echo = echo $color(normal) -mti2 %::target

  nxt::TextQuerySelfEncrypted

}

on *:FILERCVD:*:{

; this isn't necessary anymore.. just use $get(-1) for the current file
  var %a = 1
  while ($get(%a)) {
    if (($nick == $get(%a)) && ($nopath($filename) == $get(%a).file)) break
    inc %a
  }
  if (($get(%a) == $null) || ($get(%a).cps == n/a)) return
  haltdef
  var %::filename = $filename
  if ($nvar(transfer.movedl)) {
    var %mvdir = $nvar(transfer.movedir)
    if ($isdir($qt(%mvdir))) {
      if ($nvar(transfer.movedl.networkfolder)) set %mvdir %mvdir $+ \ $+ $mkfn($iif($network,$network)) $+ \
      if (!$isdir(%mvdir)) mkdir %mvdir
      if ($nvar(transfer.movedl.nickfolder)) set %mvdir %mvdir $+ \ $+ $mkfn($iif($nick,$nick)) $+ \
      if (!$isdir(%mvdir)) mkdir %mvdir
      set %::filename $replace(%mvdir $+ \ $+ $mkfn($nopath($filename)),\\,\)
      if ($isfile($qt(%::filename))) .remove -b $qt(%::filename)
      .rename $qt($filename) $qt(%::filename)
    }

  }

  set -u1 %:echo echo $color(ctcp) -ti2 $+ $iif((@* !iswm $active) && ($_isactive) && ($hget(nxt_events, Active.CTCPs)), a, s)
  set -u1 %::fkey1 $fkey.bind(run $qt(%::filename),30,F11)
  set -u1 %::fkey2 $fkey.bind(run $qt($nofile(%::filename)),30,F12)
  set -u1 %::fkey3 $fkey.bind(remove -b $qt(%::filename),30,sF3)
  set -u1 %::speedcps $get(%a).cps
  set -u1 %::time $get(%a).secs
  set -u1 %::filesize $file(%::filename).size
  set -u1 %::nick $nick
  
  nxt::DCCFileRCVD
}
on 1:FILESENT:* {
  ;fix this
  if ($ncid(halt_filesent. $+ $nick $+ . $+ $nopath($filename)) == $true) { ncid -r halt_filesent. $+ $nick $+ . $+ $nopath($filename) | haltdef | return }

  var %a = 1,
  while ($send(%a)) {
    if (($nick == $send(%a)) && ($nopath($filename) == $send(%a).file)) break
    inc %a
  }
  if ($send(%a) == $null) return
  ;  haltdef
  set -u1 %::filename $filename
  set -u1 %:echo echo $color(ctcp) -ti2 $+ $iif((@* !iswm $active) && ($_isactive) && ($hget(nxt_events, Active.CTCPs)), a, s)
  set -u1 %::fkey1 $fkey.bind(run $qt(%::filename),30,F11)
  set -u1 %::fkey2 $fkey.bind(run $qt($nofile(%::filename)),30,F12)
  set -u1 %::fkey3 $fkey.bind(remove -b $qt(%::filename),30,sF3)
  set -u1 %::speedcps $send(%a).cps
  set -u1 %::time $send(%a).secs
  set -u1 %::filesize $file(%::filename).size
  set -u1 %::nick $nick
  
  nxt::DCCFileSent
}
;ctcp ^&*:*:?:nxt_onctcp $1-
;ctcp ^&*:*:#:nxt_onctcp $1-
ctcp ^&*:*:?:{
  .signal -n ctcp $cid $target $fulladdress $1- 
  if (($theme.setting(ctcp)) && ($1 != DCC)) haltdef
  if ($hget(ctcpreplys,%::ctcp $+ .style) == ignore) { haltdef }
}
ctcp ^&*:*:#:{
  .signal -n ctcp $cid $target $fulladdress $1-
  if (($theme.setting(ctcpchan)) && ($1 != DCC)) haltdef
  if ($hget(ctcpreplys,%::ctcp $+ .style) == ignore) { haltdef }
}
on *:signal:ctcp:nxt_onctcp $1-
alias nxt_onctcp {
  set -u1 %::ctcp $4
  var %txt = $5-
  set -nu1 %::text $strip(%txt, o)
  set -u1 %::target $2 | if ($2 ischan) set -u1 %::chan $2
  set -u1 %::nick $gettok($3,1,33)
  set -u1 %::address $gettok($3,2,33)
  nxt_set std parentext

  var %ch = 0, %txt, %rpl
  if (%::target != $me) { %ch = 1 }
  if (%::target ischan) {
    if ($chan.ishideevent(ctcp,%::chan)) { haltdef | return }
    var %tgt = $chan.eventtarget(ctcp, %::chan)) 
    if (!%tgt)  var %tgt = $gettok($hget(nxt_events, %::chan), 6, 44)
    if (%tgt = 2) { set -u1 %:echo echo $color(ctcp) -sti2 $+ $iif($nvar(logging.stripctcp),g)   }
    else { set -u1 %:echo echo $color(ctcp) -ti2 $+ $iif($nvar(logging.stripctcp),g) $+ $iif($ischanset(nohighlightmessage,%::target),n) %::target }
  }
  else {
    set -u1 %:echo echo $color(ctcp) -ti2 $+ $iif((@* !iswm $active) && ($_isactive) && ($hget(nxt_events, Active.CTCPs)), a, s)
  }
  if ($hget(ctcpreplys,%::ctcp $+ .style) == ignore) { haltdef | return }
  if ((%::ctcp == DCC) && ($gettok(%::text,1,32) == CHAT) && (%::target == %::me)) {
    set -u1 %::iaddress $longip($gettok(%::text,3,32))
    set -u1 %::dccport $gettok(%::text,4,32)

    nxt::DCCChatReq
    return
  }
  elseif ((%::ctcp == DCC) &&  ($gettok(%::text,1,32) == SEND) && (%::target == %::me)) {
    if ($count(%ctcp %::text,") == 2) tokenize 127 $replace(%::ctcp $gettok(%::text,1,32),$chr(32),) $+  $+ $gettok(%::ctcp %::text,2,34) $+  $+ $replace($gettok(%::ctcp %::text,3,34),$chr(32),)
    else tokenize 32 %::ctcp %::text
    set -u1 %::iaddress $longip($4)
    set -u1 %::dccport $5
    set -u1 %::filename $3
    set -u1 %::filesize $6
    nxt::DCCGetReq
    return
  }
  if (%ch) { nxt::CTCPChan ! }
  else { nxt::CTCP ! }
  nxt_unset
  haltdef
}
alias ctcp {
  if ($isid) { return }
  if ($0 < 2) || (!$server) || ($2 == DCC) { .timer.nxt 1 0 !ctcp $1- | .timer.nxt -e | return }
  set -u1 %::target $1
  set -u1 %::ctcp $upper($2)
  set -nu1 %::text $3-
  nset ctcpsent -> [ctcp( $+ $1 $+ )] %::ctcp $3-
  if (($2 == ping) && ($3 == $null)) qctcp $1 PING $ticks
  else qctcp $1 %::ctcp $3-
  if (!$show) { return }
  nxt_set std parentext
  set -u1 %:echo echo $color(ctcp) -ti2 $+ $_active
  if ($1 ischan) { set -u1 %::chan $1 | nxt::CTCPChanSelf ! }
  else { set -u1 %::nick $1 | nxt::CTCPSelf ! }
  nxt_unset + nick chan ctcp target
}

on &*:CTCPREPLY:*:{
  if (($1 == LAGSTAT) && ($nick == $me) && ($nvar(lagstat) == on)) {
    if ($2 isnum) {
      var %a = $abs($rrpt($calc($ticks - $2)))
      ncid lag $iif(%a < 0,0,%a)
      ncid lag.history $instok($gettok($ncid(lag.history),1-4,32),$ncid(lag),1,32)
      ncid lag.avg $calc(($replace($ncid(lag.history),$chr(32),+)) / $numtok($ncid(lag.history),32))
      
      .signal -n lagstat

      halt
    }
  }
  else {
    var %rpl | set -n %rpl $2-
    if ($1 == PING) && ($2- isnum 1- $+ $ctime) { %rpl = $abs($rrpt($sub($ticks,$2))) }
    set -u1 %:echo echo $color(ctcp) -ti2 $+ $_active
    set -u1 %::ctcp $upper($1)
    set -nu1 %::text $strip(%rpl, o)
    nxt_set std nick address target parentext
    nxt::CTCPReply
    nxt_unset + ctcp
  }
  nset ctcprrec [ $+ $nick $+ ( $+ $address $+ )] $1 $+ : $2-
}

alias ctcpreply {
  if ($isid) { return }
  if ($0 < 2) || (!$server) { .timer.nxt 1 0 !ctcpreply $1- | .timer.nxt -e | return }
  .!ctcpreply $1-
  if (!$show) { return }
  set -u1 %:echo echo $color(ctcp) -ti2 $+ $_active
  set -u1 %::target $1
  set -u1 %::ctcp $upper($2)
  set -nu1 %::text $3-
  set -u1 %::nick $1
  nxt_set std parentext
  nxt::CTCPReplySelf !
  nxt_unset + ctcp target nick
}
alias dns {
  if ($isid) { return }
  if (!$0) || (($1 == -h) && ($0 = 1)) || ((. !isin $1) && ($1 != -h) && (!$server)) {
    .timer.nxt 1 0 !dns $1- | .timer.nxt -e | return
  }
   if (($istok($ncid(server_CMDS),userip,44)) && ($ncid(is_ircop)) && ((*.IP iswm $address($1,0)) || ($regex($_gettok($address($1,0),2,64,1,46), [a-zA-Z]-[A-Z0-9])))) { 
    ncid unreal_useripdns $addtok(unreal_useripdns,$1,44)
    .quote userip $1
  }
  else {
    .!dns $1-
  }
  if (!$show) { return }
  var %h = $1, %f
  if ($istok(-h -c, $1, 32)) { %f = $1 | %h = $2 }
  if (%f != -h) && (. !isin %h) && ($address(%h, 5)) { %h = $gettok($ifmatch, 2, 64) }
  set -u1 %:echo echo $color(info) -ti2 $+ $iif((@* iswm $active) && ($_isactive), s, a)
  set -u1 %::address %h
  nxt_set std
  nxt::DNS !
  nxt_unset + address
}

; ----------------------------------------------------------------------
; Numeric (raw) events  ------------------------------------------------
; ----------------------------------------------------------------------

raw 372:*:{
  ;We check if raw 372 (motd) is themed, if not, we don't theme it (to allow multiple spaces and ascii graphics in motd)
  if (!$halted) && ($isalias(nxt::Raw.372)) { set -nu1 %::text $3- | _doraw $1- }
}
raw 002:*:set -u1 %::value $ [ $+ [ $0 ] ] | _doraw $1-
raw 003:*:if ($2-5 == this server was created) { set -u1 %::value $6- } | _doraw $1-
raw 221:*:set -u1 %::nick $me | set -u1 %::modes $2 | _doraw $1-
raw 250:*:set -u1 %::value $5 | _doraw $1-
raw 251:*:set -u1 %::users $4 | set -u1 %::text $7 | set -u1 %::value $10 | _doraw $1-
raw 255:*:set -u1 %::users $4 | set -u1 %::value $7 | _doraw $1-
raw 265:*:{
  if ($2 isnum) && ($3 isnum) { set -u1 %::users $2 | set -u1 %::value $3 } 
  else { set -u1 %::users $5 | set -u1 %::value $7  }
  _doraw $1-
}
raw 266:*:{
  if ($2 isnum) && ($3 isnum) { set -u1 %::users $2 | set -u1 %::value $3 } 
  else { set -u1 %::users $5 | set -u1 %::value $7 }
  _doraw $1-
}
raw 301:*:{
  if ($halted) { return }
  var %h = [ [ $cid ] $+ ] .ircN.cid
  if ($istok($ncid(whois),$2,44)) { 
    if ($istok($ncid(whois),$2,44)) { hadd %h tmpwhois.Away $3- | haltdef }
    else { set -u1 %::nick $2 | set -nu1 %::away $3- | set -nu1 %::text $3- | _doraw $1- }
  }
  elseif ($istok($ncid(lastaway),$2,44)) haltdef
  else {
    set -u1 %::nick $2 | set -u1 %::chan $2 | set -u1 %::value $2
    _doraw $1-
  }
  ncid lastaway $addtok($ncid(lastaway),$2,44)
}
raw 302:*:{
  if ($halted) || (!$isalias(nxt::Raw.302)) { return }
  var %i = 2, %t = $0, %p, %addr, %pos
  while (%i <= %t) {
    %p = $ [ $+ [ %i ] ]
    %addr = $gettok(%p, 2, 61)
    %pos = $pos(%addr, $left($remove(%addr, +, -), 1), 1)
    set -u1 %::nick $gettok(%p, 1, 61)
    set -u1 %::address $mid(%addr, %pos)
    set -u1 %::value $left(%addr, $calc(%pos - 1))
    if ($right(%::nick, 1) == *) { %::nick = $left(%::nick, -1) | %::value = %::value $+ * }
    ._doraw $1-
    inc %i
  }
}
raw 378:*:{
  if ($halted) { return }
  var %r = /is connecting from (.+)\s?(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})?/
  if ($regex($3-,%r)) {
  if ($cwiget($2,realhost)) {
    var %h = [ [ $cid ] $+ ] .ircN.cid
    if ($istok($ncid(whowas),$2,44)) {
      if (* iswm $hget(nxt_theme, Whowas)) {
        hadd %h tmpwhois.RealHost $cwiget($2,realhost)
        haltdef
      }
      if ($isalias(nxt::Raw.378)) { set -u1 %::nick $2 | set -u1 %::value $cwiget($2,realhost) | set -u1 %::text $cwiget($2,realhost) | set -u1 %::numeric $numeric | set -u1 %::realhost $cwiget($2,realhost) | ._doraw $1-  }
    }
    elseif ($istok($ncid(whois),$2,44)) {
      if (* iswm $hget(nxt_theme, Whois)) {
        hadd %h tmpwhois.RealHost $cwiget($2,realhost)
        haltdef
      }
      if ($isalias(nxt::Raw.378)) { set -u1 %::nick $2 | set -u1 %::value $cwiget($2,realhost) | set -u1 %::text $cwiget($2,realhost) | set -u1 %::numeric $numeric | set -u1 %::realhost $cwiget($2,realhost) | ._doraw $1-  }
     }
   }
   haltdef
 }
}
raw 379:*:{
  var %r 
  set %r /is using modes \+([a-zA-Z]+)\s?\+?([a-zA-Z]+)?/
  if ($regex($3-,%r)) {
    if ($cwiget($2,umode)) {
    var %h = [ [ $cid ] $+ ] .ircN.cid
    if ($istok($ncid(whowas),$2,44)) {
      if (* iswm $hget(nxt_theme, Whowas)) {
        hadd %h tmpwhois.UMode $cwiget($2,umode)
        hadd %h tmpwhois.UMode.ircop $cwiget($2,umode.ircop)
        haltdef
      }
      if ($isalias(nxt::Raw.379)) { set -u1 %::nick $2 | set -u1 %::value $cwiget($2,umode) | set -u1 %::text $cwiget($2,umode) | set -u1 %::numeric $numeric | set -u1 %::umode $cwiget($2,umode) | ._doraw $1-  }
    }
    elseif ($istok($ncid(whois),$2,44)) {
      if (* iswm $hget(nxt_theme, Whois)) {
        hadd %h tmpwhois.UMode $cwiget($2,umode)
        hadd %h tmpwhois.UMode.ircop $cwiget($2,umode.ircop)
        haltdef
      }
      if ($isalias(nxt::Raw.379)) { set -u1 %::nick $2 | set -u1 %::value $cwiget($2,umode) | set -u1 %::text $cwiget($2,umode) | set -u1 %::numeric $numeric | set -u1 %::realhost $cwiget($2,umode) | ._doraw $1-  }
     }
   }
 }
}
; /list
raw 321:*:if (!$halted) && ($isalias(nxt::Raw.321)) { _doraw $1- }
raw 322:*:if (!$halted) && ($isalias(nxt::Raw.322)) { _doraw $1- }
raw 323:*:if (!$halted) && ($isalias(nxt::Raw.323)) { _doraw $1- }
; /links
raw 364:*:if (!$halted) && ($isalias(nxt::Raw.364)) { _doraw $1- }
raw 365:*:if (!$halted) && ($isalias(nxt::Raw.365)) { _doraw $1- }

raw 324:*:set -u1 %::chan $2 | set -u1 %::value $3- | set -u1 %::modes $3- | set -u1 %::text $3- | _doraw $1-
raw 329:*:set -u1 %::chan $2 | set -u1 %::value $asctime($3) | set -u1 %::text $3- | _doraw $1-
raw 333:*:set -u1 %::chan $2 | set -u1 %::nick $3 | set -u1 %::value $asctime($4) | set -u1 %::text %::value | _doraw $1-
raw 341:*:set -u1 %::nick $2 | set -u1 %::chan $3 | _doraw $1-
raw 352:*:{
  if ($ncid(rawcode.352) == $true) { ncid -r rawcode.352 | return }
  if (($istok($ncid(who),$2,44)) || ($istok($ncid(who),$3,44)) || ($istok($ncid(who),$4,44)) || ($istok($ncid(who),$5,44)) || ($istok($ncid(who),$6,44))) {
    if ($2 != *) { set -u1 %::chan $2 }
    set -u1 %::address $+($3, @, $4)
    set -u1 %::wserver $5
    set -u1 %::nick $6
    set -u1 %::away $iif((h isin $7), H, G)
    set -u1 %::isoper is $iif((* !isin $7), not)
    set -u1 %::cmode $remove($7, *, H, G)
    set -u1 %::value $8
    set -u1 %::realname $9-
    _doraw $1-
  }
  haltdef
}
alias ircop.returnthemed {
  nxt_set std
  var %x = $hget(nxt_theme,JoinStatIrcOpSingle)
  var %a = $gettok($2,1,45), %b = $gettok($2,2,45), %i, %l
  set %i %a
  while (%i <= %b) {
    ;set %l $addtok(%l,$ncid($tab(ircops,$1,%i)),32)
    if ($ncid($tab(ircops,$1,%i))) {
      set -u1 %::nick $gettok($ifmatch,1,32)
      set -u1 %::wserver $gettok($ifmatch,2-,32)
      set %l $addtok(%l,$eval($nxt_precompile(%x),2),32)
    }
    ;set %l $addtok(%l,%x,32)
    inc %i
  }
  return %l
}
raw 315:*:{
  if ($ncid(haltwho)) { ncid -r haltwho | return }
  if ($istok($ncid(joinwho),$2,44)) { 
   if (($nvar(colnick) == on) && ($nvar(colul) == on) && ($me ison $2) && ($isalias(colnick))) .ntimer colnick $+ $chan 1 1  .colnick $2
    if (($nvar(join.ircops)) && ($chancid($2,ircops))) {
      ncid -r $tab(ircops,$2,*)
      var %a = 1, %b, %c
      while ($gettok($chancid($2,ircops),%a,44) != $null) { 
        set %c $ifmatch
        ncid $tab(ircops,$2,%a) %c $ialget(%c,server)
        inc %a 
      }
      nxt_set std
      set -u1 %::chan $2
      set -u1 %:echo echo $color(normal) -bfti2 $2
      nxt::JoinStatIrcOp
    } 
    .timer 1 0 ncid joinwho $remtok($ncid(joinwho),$2,1,44)
    .timer 1 0 ncid updial $remtok($ncid(updial),$2,1,44)

    if ($ischanset(onjoin.showclones, $2)) .clones $2
  }
  elseif ($istok($ncid(nickfind.who),$2,44)) {
    nickfind <<whoend>> $2
    ncid nickfind.who $remtok($ncid(nickfind.who),$2,1,44)
    halt
  }
  elseif ($istok($ncid(cstats),$2,44)) {
    iiecho -w $2  
    iiecho -w $2 . $+ $str(-,51) $+ .
    iiecho -w $2 $vl $center(49,Channel Stats for [ $2 ] ) $vl
    iiecho -w $2 $vl $+ $str(-,51) $+  $vl
    iiecho -w $2 $vl $lfix(5,ops[) $+ $center(3,$hc($opnick($2,0))) $+ ] voice[ $+ $center(3,$hc($vnick($2,0))) $+ ] none[ $+ $center(3,$hc($rnick($2,0))) $+ ] total[ $+ $center(3,$hc($nick($2,0))) $+ ] $lfix(9,$vl)
    iiecho -w $2 $vl $lfix(5,away[) $+ $center(3,$hc($ncid(naway))) $+ ] ircop[ $+ $center(3,$hc($ncid(niops))) $+ ] hops[ $+ $center(3,$hc($int($+($ncid(hop1), .,$ncid(hop4))))) $+ ] from $center(13,$sc($left($server,13))) $vl
    iiecho -w $2 ' $+ $str(-,51) $+ '
    iiecho -w $2  
    ncid -r cstats,hop*,cthops,niops,naway,ncls,cladd,cnum,chops
    halt
  }
  elseif ($istok($ncid(lircops),$2,44)) {
    if (!$ncid(lircops. [ $+ [ $2 ] $+ ] .num)) iecho -w $2 No ircops were found on $hc($2) $+ . ( $+ $sc($nick($2,0)) users)
   else iiecho ' $+ $str(-,45) $+ '
    ncid lircops $remtok($ncid(lircops),$2,1,44)
    ncid -r lircops. $+ $2 $+ .num
    halt
  }
  if ($ncid($+(joinsync.,$2))) {
    if (!$istok($ncid(who),$2,44)) {
      if ($nvar(join.sync) == on) { 
        set -u1 %:echo echo $color(normal) -bfti2 $2
        set -nu1 %::text $1-
        set -u1 %::chan $2
        set -u1 %::ticks $ticks
        set -u1 %::syncstart $ncid($+(joinsync.,$2))
        nxt::JoinSynced
      }
    }
    ncid -r $+(joinsync.,$2)
  }
  if ($istok($ncid(who),$2,44)) {
    if ($2 != *) { set -u1 %::chan $2 }
    set -u1 %::address $+($3, @, $4)
    set -u1 %::wserver $5
    set -u1 %::nick $6
    set -u1 %::away $iif((h isin $7), H, G)
    set -u1 %::isoper is $iif((* !isin $7), not)
    set -u1 %::cmode $remove($7, *, H, G)
    set -u1 %::value $8
    set -u1 %::realname $9-
    ;iiecho $chr(39) $+ end of $hc($2) /WHO list
    _doraw $1-
    ncid who $remtok($ncid(who),$2,1,44)
  }
  haltdef
}
raw 353:*:set -u1 %::chan $2 | set -u1 %::text $3- | _doraw $1-
raw 391:*:set -u1 %::text $3- | _doraw $1-

; whois
raw 311:*:{
  var %h = [ [ $cid ] $+ ] .ircN.cid
  if ($halted) { return }
  if ($istok($ncid(whois),$2,44)) {
    if (* iswm $hget(nxt_theme, Whois)) {
      hadd %h tmpwhois.Nick $2 | hadd %h tmpwhois.Address $+($3, @, $4)
      hadd %h tmpwhois.RealName $6-
      haltdef
    }
    if ($isalias(nxt::Raw.311)) {
      set -u1 %::nick $2
      set -u1 %::value $3
      set -u1 %::text $3-
      set -u1 %::numeric $numeric
      set -u1 %::address $+($3, @, $4)
      set -nu1 %::realname $6-
      ._doraw $1-
    }
  }
}
raw 275:*:{
  if ($halted) { return }
  var %h = [ [ $cid ] $+ ] .ircN.cid
  if ($istok($ncid(whois),$2,44)) {
    if (* iswm $hget(nxt_theme, Whois)) {
      hadd %h tmpwhois.SSL $3-
      haltdef    
    }
    if ($isalias($+(nxt::Raw.,$numeric))) {
      set -u1 %::nick $2
      set -u1 %::value $3
      set -u1 %::text $3-
      set -u1 %::numeric $numeric
      set -u1 %::ssl $3-
      ._doraw $1-
    }
  }
}
raw 671:*:{
  if ($halted) { return }
  var %h = [ [ $cid ] $+ ] .ircN.cid
  if ($istok($ncid(whois),$2,44)) {
    if (* iswm $hget(nxt_theme, Whois)) {
      hadd %h tmpwhois.SSL $3-
      haltdef    
    }
    if ($isalias($+(nxt::Raw.,$numeric))) {
      set -u1 %::nick $2
      set -u1 %::value $3
      set -u1 %::text $3-
      set -u1 %::numeric $numeric
      set -u1 %::ssl $3-
      ._doraw $1-
    }
  }
}
raw 310:*:{
  if ($halted) { return }
  var %h = [ [ $cid ] $+ ] .ircN.cid
  if ($istok($ncid(whois),$2,44)) {
    if (* iswm $hget(nxt_theme, Whois)) {
      hadd %h tmpwhois.UserModes $3-
      haltdef    
    }
    if ($isalias(nxt::Raw.310)) {
      set -u1 %::nick $2
      set -u1 %::value $3
      set -u1 %::text $3-
      set -u1 %::numeric $numeric
      set -u1 %::usermodes $3-
      ._doraw $1-
    }
  }
}
raw 338:*:{
  if ($halted) { return }
  var %h = [ [ $cid ] $+ ] .ircN.cid
  if ($istok($ncid(whowas),$2,44)) {
    if (* iswm $hget(nxt_theme, Whowas)) {
      hadd %h tmpwhois.RealHost $3-
      haltdef    
      }
     if ($isalias(nxt::Raw.338)) { set -u1 %::nick $2 | set -u1 %::value $3 | set -u1 %::text $3- | set -u1 %::numeric $numeric | set -u1 %::realhost $3- | ._doraw $1-  }
    }
    elseif ($istok($ncid(whois),$2,44)) {
    if (* iswm $hget(nxt_theme, Whois)) {
      hadd %h tmpwhois.RealHost $3-
      haltdef    
    }
     if ($isalias(nxt::Raw.338)) { set -u1 %::nick $2 | set -u1 %::value $3 | set -u1 %::text $3- | set -u1 %::numeric $numeric | set -u1 %::realhost $3- | ._doraw $1-  }
  }
}
raw 314:*:{
  var %h = [ [ $cid ] $+ ] .ircN.cid
  if ($halted) { return }
  if ($istok($ncid(whowas),$2,44)) { 
    ;showwhois Whowas
    hadd %h tmpwhois.Nick $2 | hadd %h tmpwhois.Address $+($3, @, $4)
    hadd %h tmpwhois.RealName $6- | haltdef
  }
  if ($isalias(nxt::Raw.314)) {
    set -u1 %::nick $2 | set -u1 %::address $+($3, @, $4) | set -nu1 %::realname $6- | ._doraw $1-
  }
}
raw 319:*:{
  if ($halted) { return }
  var %h = [ [ $cid ] $+ ] .ircN.cid
  if ($istok($ncid(whois),$2,44)) { hadd %h tmpwhois.Chan $hget(%h, tmpwhois.Chan) $3- | haltdef }
  if ($isalias(nxt::Raw.319)) { set -u1 %::nick $2 | set -nu1 %::chan $3- | ._doraw $1- }
}
raw 312:*:{
  if ($halted) { return }
  var %h = [ [ $cid ] $+ ] .ircN.cid

    if ($istok($ncid(whowas),$2,44)) {
    var %i =  $ncid(whowas.inc. $+ $2)
    if (%i >= $iifelse($ncid(whowas.maxnum. $+ $2),1)) { halt }
    hinc -u60 $ncid whowas.inc. $+ $2 

    hadd %h tmpwhois.Nick $2 | hadd %h tmpwhois.WServer $3 | hadd %h tmpwhois.ServerInfo $4- | haltdef
    if ($isalias(nxt::Raw.312)) { set -u1 %::nick $2 | set -u1 %::wserver $3 | set -nu1 %::serverinfo $4- | ._doraw $1- }
    showwhois whowas
  }
  elseif ($istok($ncid(whois),$2,44)) {
    hadd %h tmpwhois.WServer $3 | hadd %h tmpwhois.ServerInfo $4- | haltdef
    if ($isalias(nxt::Raw.312)) { set -u1 %::nick $2 | set -u1 %::wserver $3 | set -nu1 %::serverinfo $4- | ._doraw $1- }
  }
}
raw 307:*:{
  if ($halted) { return }
  if ($istok($ncid(whois),$2,44)) { ncid tmpwhois.IsRegd is | haltdef }
  if ($isalias(nxt::Raw.307)) { set -u1 %::nick $2 | set -u1 %::isregd is | ._doraw $1- }
}
raw 313:*:{
  if ($halted) { return }
  if ($istok($ncid(whois),$2,44)) { ncid tmpwhois.IsOper is | ncid tmpwhois.OperLine $3- | haltdef }
  if ($isalias(nxt::Raw.313)) { set -u1 %::nick $2 | set -u1 %::isoper is | set -nu1 %::operline $3- | ._doraw $1- }
}
raw 317:*:{
  if ($halted) { return }
  var %h = [ [ $cid ] $+ ] .ircN.cid
  if ($istok($ncid(whois),$2,44)) { ncid tmpwhois.IdleTime $3 | ncid tmpwhois.SignonTime $4 | haltdef }
  if ($isalias(nxt::Raw.317)) {
    set -u1 %::nick $2
    set -u1 %::idletime $3
    set -u1 %::signontime $asctime($4)
    ._doraw $1-
  }
}
raw 318:*:{
  if ($halted) { return }
  if ($hget(nxt_data, NoNick. $+ $2)) { hdel nxt_data NoNick. $+ $2 | halt }
  var %h = [ [ $cid ] $+ ] .ircN.cid
  if ($istok($ncid(whois),$2,44)) { showwhois Whois | haltdef | ncid whois $remtok($ncid(whois),$2,1,44) }
  if ($isalias(nxt::Raw.318)) { set -nu1 %::nick $2 | ._doraw $1- }

  if ($nvar(whoiswindow.active)) {
    var %w = $iif($nvar(whoiswindow.global) == on,@Whois,$cidwin(@Whois))
    if ($window(%w)) window -a %w
  }

}
raw 369:*:{
  if ($halted) { return }
  if (* iswm $hget(nxt_data, NoNick. $+ $2)) { hdel nxt_data NoNick. $+ $2 | halt }
  if ($isalias(nxt::Raw.369)) { set -nu1 %::nick $2 | ._doraw $1- }
}
raw *:*:{
  if ($numeric == 0) return
  if (6* iswm $numeric) || ($halted) { return }
  if ($numeric = 303) && (!$2-) { nxt_error - $+ $_active The specified nicks are not online | haltdef }
  set -u1 %::nick $2 | set -u1 %::chan $2 | set -u1 %::value $2
  _doraw $1-
}
; /_doraw.fake <numeric> <fromserver> <target> <str> [params]
alias _doraw.fake {
  var %cl = info2, %f, %n = $right(00 $+ $1, 3)
  if ($istok(331 332 333, $numeric, 32)) { %cl = topic }
  elseif ($numeric = 372) { %cl = normal }
  set -u1 %::numeric $1
  set -u1 %::fromserver $2
  set -u1 %::target $3
  nxt_set std
  if ($istok(324 328 329 331 332 333 352 353 366 367 368 404 482, %::numeric, 32)) {
    var %ch = $5 | if (%::numeric = 353) { %ch = $6 }
    set -u1 %::chan %ch
    if (%ch ischan) { %f = -ti2 %ch }
    set -u1 %::value $6
    if (!$var(%::text)) { set -nu1 %::text $6- }
  }
  if ($istok(001 002 003 004 005 042 250 251 252 253 254 255 265 266 375 376 422, %n, 32)) {
    %f = -ti2s
  }
  if (!$isalias(nxt::Raw. $+ %n)) {
    if (!%f) { %f = -ti2 $+ $iif(($_isactive) && ($status != connecting) && (@* !iswm $active), a, s) }
    set -u1 %:echo echo $color(%cl) %f
    if (!$var(%::text)) { set -nu1 %::text $5- }
    nxt_set parentext
    nxt::Raw.Other !
  }
  else {
    if ($istok(403 405 437 442 467 468 471 473 474 475 477 478, %::numberic, 32)) {
      set -u1 %::chan $5
      if ($numeric = 478) { set -u1 %::value $6 | set -nu1 %::text $7- }
      elseif (!$var(%::text)) { set -nu1 %::text $6- }
    }
    elseif ($istok(432 433 436 438, %::numeric, 32)) { set -nu1 %::text $6- }
    elseif ($numeric = 301) {
      if (!$hget(nxt_events, Active.Away)) { %f = -ti2s }
      elseif ($query($5)) { %f = -ti2 $5 }
    }
    if (!%f) { %f = -ti2 $+ $iif(($_isactive) && ($status != connecting) && (@* !iswm $active), a, s) }
    if (!$var(%::text)) {
      if ($var(%::nick)) || ($var(%::chan)) || ($var(%::value)) { set -nu1 %::text $6- }
      else { set -nu1 %::text $5- }
    }
    set -u1 %:echo echo $color(%cl) %f
    nxt_set parentext
    $+(nxt::Raw., %n)
  }
  haltdef
  :end
  nxt_unset std nick address chan modes wserver target parentext fromserver value numeric away isoper cmode realname
}
; /_doraw str <params>
alias -l _doraw {
  var %cl = info2, %f, %n = $right(00 $+ $numeric, 3)
  if ($istok(401 404, $numeric, 32)) { hadd -u15 nxt_data NoNick. $+ $2 1 }
  elseif (* iswm $hget(nxt_data, NoNick. $+ $2)) { hdel nxt_data NoNick. $+ $2 }
  if ($halted) && ($show) { goto end }
  if ($istok(331 332 333, $numeric, 32)) { %cl = topic }
  elseif ($numeric = 372) { %cl = normal }
  set -u1 %::numeric $numeric
  set -u1 %::fromserver $nick
  nxt_set std target
  if ($istok(324 328 329 331 332 333 352 353 366 367 368 404 482, $numeric, 32)) {
    var %ch = $2 | if ($numeric = 353) { %ch = $3 }
    set -u1 %::chan %ch
    if ($istok($ncid(who),$6,44)) { %f = -ati2 }
    elseif (%ch ischan) { %f = -ti2 %ch }
    set -u1 %::value $3
    if (!$var(%::text)) { set -nu1 %::text $3- }
  }
  if ($istok(001 002 003 004 005 042 250 251 252 253 254 255 265 266 375 376 422, %n, 32)) {
    %f = -ti2s
  }
  if (!$isalias(nxt::Raw. $+ %n)) {
    if (!%f) { %f = -ti2 $+ $iif(($_isactive) && ($status != connecting) && (@* !iswm $active), a, s) }
    set -u1 %:echo echo $color(%cl) %f
    if (!$var(%::text)) { set -nu1 %::text $2- }
    nxt_set parentext
    nxt::Raw.Other !
  }
  else {
    if ($istok(403 405 437 442 467 468 471 473 474 475 477 478, $numeric, 32)) {
      set -u1 %::chan $2
      if ($numeric = 478) { set -u1 %::value $3 | set -nu1 %::text $4- }
      elseif (!$var(%::text)) { set -nu1 %::text $3- }
    }
    elseif ($istok(432 433 436 438, $numeric, 32)) { set -nu1 %::text $3- }
    elseif ($numeric = 301) {
      if (!$hget(nxt_events, Active.Away)) { %f = -ti2s }
      elseif ($query($2)) { %f = -ti2 $2 }
    }
    if (!%f) { %f = -ti2 $+ $iif(($_isactive) && ($status != connecting) && (@* !iswm $active), a, s) }
    if (!$var(%::text)) {
      if ($var(%::nick)) || ($var(%::chan)) || ($var(%::value)) { set -nu1 %::text $3- }
      else { set -nu1 %::text $2- }
    }
    set -u1 %:echo echo $color(%cl) %f
    nxt_set parentext
    $+(nxt::Raw., %n)
  }
  haltdef
  :end
  nxt_unset std nick address chan modes wserver target parentext fromserver value numeric away isoper cmode realname
}
alias -l showwhois {
  var %h = [ [ $cid ] $+ ] .ircN.cid
  if (!$hget(%h, tmpwhois.IsOper)) { hadd %h tmpwhois.IsOper is not }
  if (!$hget(%h, tmpwhois.IsRegd)) { hadd %h tmpwhois.IsRegd is not }
  nxt_set std
  set -u1 %::nick $hget(%h, tmpwhois.Nick) | set -u1 %::address $hget(%h, tmpwhois.Address) | set -nu1 %::realname $hget(%h, tmpwhois.RealName)
  set -nu1 %::chan $hget(%h, tmpwhois.Chan) | set -u1 %::wserver $hget(%h, tmpwhois.WServer) | set -nu1 %::serverinfo $hget(%h, tmpwhois.ServerInfo)
  set -nu1 %::text $hget(%h, tmpwhois.Text) | set -u1 %::isregd $hget(%h, tmpwhois.IsRegd) | set -u1 %::isoper $hget(%h, tmpwhois.IsOper)
  set -nu1 %::operline $hget(%h, tmpwhois.OperLine) | set -u1 %::idletime $hget(%h, tmpwhois.IdleTime)
  set -nu1 %::realhost $hget(%h, tmpwhois.RealHost) | set -u1 %::usermodes $hget(%h, tmpwhois.UserModes) | set -u1 %::ssl $hget(%h, tmpwhois.SSL)
  set -u1 %::signontime $asctime($hget(%h, tmpwhois.SignonTime)) | set -nu1 %::away $hget(%h, tmpwhois.Away)
  set -u1 %:echo echo $color(whois) -ti2 $+ $iif(($_isactive) && (@* !iswm $active) && ($hget(nxt_events, Active.Whois)), a, s)
  if ($nvar(whoiswindow) == on) {
    if ($nvar(whoiswindow.global) == on) {

     if (!$window(@Whois)) window -nRkime @Whois
     set -u1 %:echo echo $color(whois) -ti2 @Whois

   }
  else {
   if (!$window(@Whois. $+ $curnet $+ . $+ $cid)) window -nRvkme @Whois. $+ $curnet $+ . $+ $cid
     set -u1 %:echo echo $color(whois) -ti2 @Whois. $+ $curnet $+ . $+ $cid 
   }
  }
  if ($1 == Whois) { nxt::Whois ! }
  else { nxt::Whowas ! }
  hdel -w %h tmpwhois.*
  nxt_unset std nick address realname chan wserver serverinfo text isregd isoper operline idletime signontime away
}
alias cwhois {
  if (!$1) {  theme.syntax $hc(/cwhois) <nickname> | return }
  if ((!$ial($1)) || (!$ialget($1,cwho))) {
    iecho No cached whois information for $hc($1)
    return
  }
  var %h = [ [ $cid ] $+ ] .ircN.cid
  if (!$hget(%h, tmpwhois.IsOper)) { hadd %h tmpwhois.IsOper is not }
  if (!$hget(%h, tmpwhois.IsRegd)) { hadd %h tmpwhois.IsRegd is not }
  nxt_set std
  set -u1 %::nick $1 | set -u1 %::address $+($ialget($1,ident),$chr(64),$gettok($ial($1),2-,64)) | set -nu1 %::realname $ialget($1,ircname)
  set -nu1 %::chan $ialget($1,chans) | set -u1 %::wserver $ialget($1,server)
  set -nu1 %::text $hget(%h, tmpwhois.Text)
  set -nu1 %::signontime $asctime($ialget($1,signon))

  if (($1 == $me) && ($ncid(lastspoke))) set -u1 %::idletime $calc($ctime - $ncid(lastspoke))
  else { set -u1 %::idletime $iif($lastactive($1),$gettok($lastactive($1),1,32),$ialget($1,idle))  } 

  if ($ialget($1,ircop)) set -u1 %::isoper is
  else set -u1 %::isoper is not
  if (($ialget($1,awaymsg)) || ($ialget($1,away))) set -nu1 %::away $iifelse($ialget($1,awaymsg),$iif($ialget($1,away),away))
  set -u1 %:echo echo $color(whois) -ti2 $+ $iif(($_isactive) && (@* !iswm $active) && ($hget(nxt_events, Active.Whois)), a, s)
  if ($hget(nxt_theme,cwhois)) { nxt::CWhois ! }
  else { nxt::Whois ! }
  hdel -w %h tmpwhois.*
  nxt_unset std nick address realname chan wserver text isregd isoper operline idletime signontime away
}
alias ncomp {
  if ($1 == $null) return
  tokenize 32 $nc($1)
  set -u1 %::text $1-
  set -u1 %::nickcomp $1-
  if ($nvar(nickcomp.style) == random) $+(nxt::,ircn.script.nickcomp.style.) $+ $gettok($nxt::ircn.script.nickcomp.styles,$rand(1,$numtok($nxt::ircn.script.nickcomp.styles,32)),32) $1-
  elseif ($isalias($+(nxt::,ircn.script.nickcomp.style.,$nvar(nickcomp.style)))) $+(nxt::,ircn.script.nickcomp.style.,$nvar(nickcomp.style)) $1-
  unset %::nickcomp
  return $result
}
alias theme.syntax {
  nxt_set std
  set -u1 %::text $1-
  set -u1 %:echo echo $color(info2) -atgi2
  nxt::ircN.script.syntax
  nxt_unset std text
}
alias form {
  if ($isalias($+(nxt::,$1))) {
    return $+(nxt::,$1)
  }
  else return $false
}
